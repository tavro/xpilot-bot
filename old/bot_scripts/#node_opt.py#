

'''
def fillMap():
    return [[ "O", "#", "#", "#", "#", "#", "#", "#", "#", "#" ],
            [ "#", "O", "#", "#", "#", "#", "#", "#", "O", "#" ],
            [ "#", "#", "O", "#", "#", "#", "#", "#", "O", "#" ],
            [ "#", "#", "#", "O", "#", "#", "#", "O", "#", "#" ],
            [ "#", "#", "#", "O", "#", "#", "#", "O", "#", "#" ],
            [ "#", "#", "#", "O", "#", "#", "#", "#", "O", "#" ],
            [ "#", "#", "#", "O", "#", "#", "#", "#", "O", "#" ],
            [ "#", "#", "#", "O", "O", "O", "#", "O", "O", "#" ],
            [ "#", "#", "#", "#", "#", "#", "O", "#", "#", "#" ],
            [ "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" ]]
'''

'''
def getPath():
    return [(0,0), (1,1), (2,2), (3,3), (3,4), (3,5), (3,6), (3,7),
            (4,7), (5,7), (6,8), (7,7), (8,7), (8,6), (8,5), (7,4),
            (7,3), (8,2), (8,1)]
'''

def drawMap(worldMap):
    for y in worldMap:
        for x in y:
            print(x, end=" ")
        print()

def removeNodesFromMap(worldMap, nodes):
    for node in nodes:
        print("Node 1: {0}, Node 0: {1}".format(node[1], node[0]))
        worldMap[node[1]][node[0]] = " "
    return worldMap

def printNodes(nodes, keyword="NODES"):
    for node in nodes:
        print(keyword, node)

def checkNeighbour(index, path, x, y):
    nodeX = (path[index][0] + x == path[index + 1][0])
    nodeY = (path[index][1] + y == path[index + 1][1])
    nextNodeX = (path[index + 1][0] + x == path[index + 2][0])
    nextNodeY = (path[index + 1][1] + y == path[index + 2][1])
    if nodeX and nodeY:
        if nextNodeX and nextNodeY:
            return path[index + 1]
    return None

def removeNullLists(nodes):
    finalList = []
    for node in nodes:
        if not (node == None):
            finalList.append(node)
    return finalList

def main(worldMap, path):
    #worldMap = fillMap()
    #path = getPath()

    nodesToRemove = []
    for i in range(len(path)):
        if (i+2) < len(path):
            nodesToRemove.append(checkNeighbour(i, path, 1, 1))
            nodesToRemove.append(checkNeighbour(i, path, -1, 1))
            nodesToRemove.append(checkNeighbour(i, path, 1, -1))
            nodesToRemove.append(checkNeighbour(i, path, -1, -1))
            nodesToRemove.append(checkNeighbour(i, path, 0, 1))
            nodesToRemove.append(checkNeighbour(i, path, 1, 0))
            nodesToRemove.append(checkNeighbour(i, path, 0, -1))
            nodesToRemove.append(checkNeighbour(i, path, -1, 0))
        nodesToRemove = removeNullLists(nodesToRemove)
    
    finalPath = [x for x in path if x not in nodesToRemove]

    #printNodes(path, "PATH")
    #printNodes(nodesToRemove, "REMOVE")
    #printNodes(finalPath, "FINAL")

    #print("OLD MAP")
    #drawMap(worldMap)

    #worldMap = removeNodesFromMap(worldMap, nodesToRemove)

    #print("NEW MAP")
    #drawMap(worldMap)
    return finalPath

#main()
